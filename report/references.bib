%==================================================================================================
% LUKE PHD THESIS BIBTEX FILE
% ---------------------------
% Sorted chronologically
%==================================================================================================




@webpage{lastpass_leak,
   title         = {LastPass Security Notice},
   url           = {https://blog.lastpass.com/2015/06/lastpass-security-notice.html/},
   author        = {Joe Siegrist},
   lastchecked   = {05-12-2015}
}

@webpage{lastpass_cleintsideencryption,
   title = {How It Works | LastPass},
   url = {https://lastpass.com/how-it-works/},
   author = {LastPass},
   lastchecked = {05-12-2015}
}

@webpage{keepass_security,
   title = {KeePass},
   url = {http://keepass.info/help/base/security.html},
   author = {KeePass},
   lastchecked = {05-12-2015}
}


@webpage{rattic_frontpage,
   title = {RatticDB},
   author = {Daniel Hall},
   url = {http://www.ratticdb.org},
   lastchecked = {05-12-2015}
}


@webpage{rattic_encryption,
   title = {RatticDB},
   author = {Daniel Hall},
   url = {https://demo.rattic.org/help/RatticDB-and-Encryption/},
   lastchecked = {05-12-2015}
}

@webpage{crypton,
   title = {Crypton - Build private applications},
   author = {Devgeeks},
   url = {https://encryptr.org},
   lastchecked = {05-12-2015}
}

@webpage{crypton_spideroak,
   title = {Encryptr Now an Official SpiderOak Product},
   author = {Tommy @ Devgeeks Blog},
   url = {http://blog.devgeeks.org/},
   lastchecked = {05-12-2015}
}


@webpage{encryptr,
   title = {Encryptr - Powered by Crypton},
   author = {Crypton},
   url = {https://crypton.io},
   lastchecked = {05-12-2015}
}

@webpage{encryptr_backend,
   title = {About Encryptr - Powered by Crypton},
   author = {Devgeeks},
   url = {https://encryptr.org#about},
   lastchecked = {05-12-2015}
}
https://github.com/SpiderOak/Encryptr/issues/156

@webpage{encryptr_selfhost,
   title = {Add server software for self-hosting. · Issue \#156 · SpiderOak/Encryptr},
   author = {devgeeks},
   url = {https://github.com/SpiderOak/Encryptr/issues/156},
   lastchecked = {05-12-2015}
}

% Optional fields: type, number, address, month, note
@TECHREPORT{crypton_paper,
   author = {Cam Pedersen and David Dahl},
   title = {Crypton: Zero-Knowledge Application Framework},
   institution = {SpiderOak},
   year = {Unknown},
   address = {https://crypton.io/crypton.pdf}
}





@webpage{crypton_git,
   title = {SpiderOak/Crypton},
   author = {SpiderOak},
   url = {https://github.com/SpiderOak/crypton},
   lastchecked = {05-12-2015}
}







@article{Hoare78,
   author      = {C. A. R. Hoare},
   title       = {Communicating sequential processes},
   journal     = {Communications of the ACM},
   volume      = {26},
   number      = {1},
   year        = {1983},
   issn        = {0001-0782},
   pages       = {100--106},
   doi         = {10.1145/357980.358021},
   publisher   = {ACM},
   address     = {New York, NY, USA},
   abstract    = {This paper suggests that input and output are basic primitives of programming 
and that parallel composition of communicating sequential processes is a fundamental program 
structuring method. When combined with a development of Dijkstra's guarded command, these concepts 
are surprisingly versatile. Their use is illustrated by sample solutions of a variety of familiar 
programming exercises.}
}


%SORTED AND FORMATTED TO HERE



@incollection {EC80,
   author          = {Emerson, E. and Clarke, Edmund},
   affiliation     = {Harvard University Aiken Computation Laboratory 02138 Cambridge Mass. USA 
02138 
   Cambridge Mass. USA},
   title           = {Characterizing correctness properties of parallel programs using fixpoints},
   booktitle       = {Automata, Languages and Programming},
   series          = {Lecture Notes in Computer Science},
   editor          = {de Bakker, Jaco and van Leeuwen, Jan},
   publisher       = {Springer Berlin / Heidelberg},
   isbn            = {},
   pages           = {169-181},
   volume          = {85},
   doi             = {10.1007/3-540-10003-2_69},
   year            = {1980},
   abstract        = {We have shown that correctness properties of parallel programs can be 
described using 
   computation trees and that from these descriptions fixpoint characterizations can be generated. 
We have 
   also given conditions on the form of computation tree descriptions to ensure that a correctness 
property 
   can be characterized using continuous fixpoints. A consequence is that a correctness property 
such as 
   inevitability under fair scheduling can be characterized as the least fixpoint of a monotonic, 
   noncontinuous transformer, but cannot be characterized using fixpoints of continuous 
transformers (nor as 
   the greatest fixpoint of a monotonic transformer of any degree of complexity lower than fair 
inevitability 
   itself). Hence, currently known proof rules are not applicable (see however [FS80]). We are now 
   investigating whether useful proof rules can exist for correctness properties having only a 
monotonic, 
   noncontinuous least fixpoint characterization. In addition, we are examining alternate notions 
of fairness 
   which do have continuous fixpoint characterizations.}
}

@webpage{TuringAward07,
   title         = {ACM Turing Award Honors Founders of Automatic Verification Technology},
   url           = {http://www.acm.org/press-room/news-releases-2008/turing-award-07},
   author        = {The Association for Computing Machinery},
   lastchecked   = {27-09-2010}
}